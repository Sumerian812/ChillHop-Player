[{"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/index.js":"1","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/App.js":"2","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/reportWebVitals.js":"3","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Player.js":"4","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Song.js":"5","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Library.js":"6","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/LibrarySong.js":"7","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Nav.js":"8","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/data.js":"9"},{"size":478,"mtime":1609344072119,"results":"10","hashOfConfig":"11"},{"size":1351,"mtime":1610290214794,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1609343257476,"results":"13","hashOfConfig":"11"},{"size":3648,"mtime":1610287278017,"results":"14","hashOfConfig":"11"},{"size":823,"mtime":1610291737335,"results":"15","hashOfConfig":"11"},{"size":668,"mtime":1610211217896,"results":"16","hashOfConfig":"11"},{"size":546,"mtime":1609687536405,"results":"17","hashOfConfig":"11"},{"size":520,"mtime":1610289806060,"results":"18","hashOfConfig":"11"},{"size":3011,"mtime":1610211861950,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1jijhe3",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/index.js",[],["40","41"],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/App.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/reportWebVitals.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Player.js",["42"],"import React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({ songInfo, setSongInfo, songs, isPlaying, setIsPlaying, currentSong, setCurrentSong }) => {\n    // ref\n    const audioRef = useRef(null)\n    // event handlers\n    const playSongHandler = () => {\n        if (isPlaying) {\n            audioRef.current.pause();\n        } else {\n            audioRef.current.play();\n        }\n        setIsPlaying(!isPlaying);\n    }\n    const updateTimeHandler = (e) => {\n        setSongInfo({\n            ...songInfo,\n            currentTime: e.target.currentTime,\n            duration: e.target.duration\n        });\n    }\n    const getTime = (time) => {\n        return (\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n        )\n    }\n    const dragHandler = (e) => {\n        audioRef.current.currentTime = e.target.value;\n        setSongInfo({ ...songInfo, currentTime: e.target.value })\n    }\n    const skipTrackHandler = (direction) => {\n        const currentIndex = songs.findIndex(song => song.id === currentSong.id);\n        const mod = (n, m) => ((n % m) + m) % m; // workaround for JS' modulo operator using negative numbers\n        setCurrentSong(\n            direction === \"forward\"\n                ? songs[mod(currentIndex + 1, songs.length)]\n                : songs[mod(currentIndex - 1, songs.length)]\n        )\n    }\n    const autoPlayHandler = () => {\n        if (isPlaying) {\n            audioRef.current.play();\n        }\n    }\n    const trackAnimation = {\n        transform: `translateX(${(songInfo.currentTime / songInfo.duration) * 100}%)`\n    }\n\n    return (\n        <div className=\"player\">\n            <div className=\"song-control\">\n                <p>{getTime(songInfo.currentTime)}</p>\n                <div\n                    className=\"track\"\n                    style={{ background: `linear-gradient(to right,${currentSong.color[0]}, ${currentSong.color[1]})` }}\n                >\n                    <input\n                        min={0}\n                        max={songInfo.duration || 0}\n                        value={songInfo.currentTime}\n                        type=\"range\"\n                        onChange={dragHandler}\n                    />\n                    <div className=\"animate-track\" style={trackAnimation}></div>\n                </div>\n                <p>{getTime(songInfo.duration || 0)}</p>\n            </div>\n            <div className=\"play-control\">\n                <FontAwesomeIcon\n                    icon={faAngleLeft}\n                    size=\"2x\"\n                    className=\"back-icon\"\n                    onClick={() => skipTrackHandler(\"back\")}\n                />\n                <FontAwesomeIcon\n                    icon={isPlaying ? faPause : faPlay}\n                    size=\"2x\"\n                    className=\"play-icon\"\n                    onClick={playSongHandler} />\n                <FontAwesomeIcon\n                    icon={faAngleRight}\n                    size=\"2x\"\n                    className=\"forward-icon\"\n                    onClick={() => skipTrackHandler(\"forward\")}\n                />\n            </div>\n            <audio\n                ref={audioRef}\n                src={currentSong.audio}\n                onTimeUpdate={updateTimeHandler}\n                onLoadedMetadata={updateTimeHandler}\n                onCanPlay={autoPlayHandler}\n                onEnded={() => skipTrackHandler(\"forward\")}\n            ></audio>\n        </div>\n    );\n}\n\nexport default Player; ","/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Song.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Library.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/LibrarySong.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/components/Nav.js",[],"/Users/veronica/ReactJsCourse/musicPlayer/music-player/src/data.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":25,"nodeType":"49","messageId":"50","endLine":1,"endColumn":33},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]